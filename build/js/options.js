(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = "<h2 id=\"what-is-this-\">What is this?</h2>\n<p>This extension for Chrome automatically reloads unpacked extensions whenever a file change event is fired. You&#39;ll never need to go to <code>chrome://extensions</code> and smash reload again. See <a href=\"#emitting-file-change-events\"><strong>Emitting File Change Events</strong></a> below to learn how to trigger trigger a file change event in your development builds.</p>\n<h2 id=\"how-does-it-work-\">How does it work?</h2>\n<p>Extension tries to connect to socket.io server on <code>http://localhost:8890</code> (yes, that port is random) and waits for <code>file.change</code> events to flow in.\nWhen an event is incoming, the extension reloads <code>chrome://extensions</code> automatically, which causes all unpacked extensions to reload and update (e.g. content scripts).\nIf there is no open tab, currently opened at <code>chrome://extensions</code>, the extension creates and reloads one.</p>\n<p>An example on how to send file change events to the extension can be found in <a href=\"#emitting-file-change-events\"><strong>Emitting File Change Events</strong></a> below.</p>\n<p>There are two supported reload methods (&quot;page&quot; and &quot;api&quot;), each with their strengths and weaknesses. The default is &quot;page&quot;, but it can be changed in the options page for this extension.</p>\n<h3 id=\"page-method\">Page Method</h3>\n<p>Reloads <code>chrome://extensions</code> page, which reloads background scripts without closing open background inspect windows, but does <strong>not</strong> reload content scripts.</p>\n<h3 id=\"api-method\">API Method</h3>\n<p>Uses a Chrome API to reload extensions directly, which reloads background scripts and closes any open background inspect windows, but <strong>does</strong> reload content scripts.</p>\n<h2 id=\"installation-usage\">Installation &amp; Usage</h2>\n<p><a href=\"https://chrome.google.com/webstore/detail/chrome-unpacked-extension/fddfkmklefkhanofhlohnkemejcbamln\">Install this extension from the webstore</a> or:</p>\n<ol>\n<li>Clone <a href=\"https://github.com/robin-drexler/chrome-extension-auto-reload\">this repo</a></li>\n<li>Run the build as described in <strong><a href=\"#development\">Development</a></strong> below</li>\n<li>Load <code>build</code> folder as unpacked extension in Chrome</li>\n</ol>\n<p>... then start developing an unpacked extension and emit file change events in your extension as described below</p>\n<h2 id=\"emitting-file-change-events\">Emitting File Change Events</h2>\n<p>You will need to have a background task running to emit file change events whenever a file in the extension you are developing locally changes. This requires that you have <a href=\"http://nodejs.org\">NodeJS</a> installed on your machine.</p>\n<ol>\n<li><p>Install <code>gulp</code> globally so that it&#39;s easy to call by running the following from your command line interface in the root of your project:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">i</span> <span class=\"nx\">gulp</span> <span class=\"o\">-</span><span class=\"nx\">g</span>\n</pre></div>\n\n</code></pre></li>\n<li><p>Install required dependencies:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">i</span> <span class=\"nx\">gulp</span><span class=\"p\">,</span> <span class=\"nx\">gulp</span><span class=\"o\">-</span><span class=\"nx\">watch</span><span class=\"p\">,</span> <span class=\"nx\">socket</span><span class=\"p\">.</span><span class=\"nx\">io</span> <span class=\"o\">-</span><span class=\"nx\">D</span>\n</pre></div>\n\n</code></pre><p>This will add the three required modules into the <code>devDependencies</code> of your <code>package.json</code> file.</p>\n</li>\n<li><p>Create a file called <code>gulpfile.js</code> in the root of your project containing the following:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"kd\">var</span> <span class=\"nx\">gulp</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;gulp&#39;</span><span class=\"p\">);;</span>\n<span class=\"kd\">var</span> <span class=\"nx\">watch</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;gulp-watch&#39;</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"nx\">io</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;socket.io&#39;</span><span class=\"p\">);</span>\n\n<span class=\"nx\">gulp</span><span class=\"p\">.</span><span class=\"nx\">task</span><span class=\"p\">(</span><span class=\"s1\">&#39;chrome-watch&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"kd\">var</span> <span class=\"nx\">WEB_SOCKET_PORT</span> <span class=\"o\">=</span> <span class=\"mi\">8890</span><span class=\"p\">;</span>\n  <span class=\"nx\">io</span> <span class=\"o\">=</span> <span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"nx\">WEB_SOCKET_PORT</span><span class=\"p\">);</span>\n  <span class=\"nx\">watch</span><span class=\"p\">(</span><span class=\"s1\">&#39;**/*.*&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">file</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">&#39;change detected&#39;</span><span class=\"p\">,</span> <span class=\"nx\">file</span><span class=\"p\">.</span><span class=\"nx\">relative</span><span class=\"p\">);</span>\n    <span class=\"nx\">io</span><span class=\"p\">.</span><span class=\"nx\">emit</span><span class=\"p\">(</span><span class=\"s1\">&#39;file.change&#39;</span><span class=\"p\">,</span> <span class=\"p\">{});</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</pre></div>\n\n</code></pre></li>\n<li><p>Run the file change watcher from your command line:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">gulp</span> <span class=\"nx\">chrome</span><span class=\"o\">-</span><span class=\"nx\">watch</span>\n</pre></div>\n\n</code></pre><p>This will launch a process that emits a <code>file.change</code> event over <code>socket.io</code> whenever a file in your project is changes.</p>\n</li>\n</ol>\n<p><strong>Note:</strong> You can use the code above as a guide when modifying your existing watch method if you already have one, or if you&#39;re using another build tool like <code>grunt</code>.</p>\n<h2 id=\"issues-and-feature-requests\">Issues and Feature requests</h2>\n<p><a href=\"https://github.com/robin-drexler/chrome-extension-auto-reload/issues\">https://github.com/robin-drexler/chrome-extension-auto-reload/issues</a></p>\n<h2 id=\"development\">Development</h2>\n<p>To hack this code, make sure you have <a href=\"http://nodejs.org\">NodeJS</a> installed, then navigate to the root of this project in your command line interface and run the following to install all dependencies:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">install</span>\n</pre></div>\n\n</code></pre><p>Generate a <code>build/</code> folder which can be loaded into Chrome as an unpacked extension:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">run</span> <span class=\"nx\">build</span>\n</pre></div>\n\n</code></pre><p>Automatically rebuild modified files into <code>build/</code> when they&#39;re saved:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">run</span> <span class=\"nx\">watch</span>\n</pre></div>\n\n</code></pre><p>Generate <code>dist/chrome-extension.zip</code>, which can be uploaded to the Chrom web store:</p>\n<pre><code><div class=\"highlight\"><pre><span class=\"nx\">npm</span> <span class=\"nx\">run</span> <span class=\"nx\">dist</span>\n</pre></div>\n\n</code></pre><h2 id=\"contributors\">Contributors</h2>\n<p>This extension was originally developed by <a href=\"https://github.com/robin-drexler/chrome-extension-auto-reload\">robin-drexler</a>.</p>\n<p>Updates by <a href=\"https://github.com/JeromeDane/chrome-extension-auto-reload\">JeromeDane</a> to add alternate reload method using <a href=\"https://github.com/arikw/chrome-extensions-reloader/blob/master/background.js#L1\">arikw&#39;s code</a>. Added gulp build process and removed <a href=\"https://www.npmjs.com/package/socket.io-client\">socket.io-client</a> code from repo so it could be loaded as a dependency instead.</p>\n";
},{}],2:[function(require,module,exports){

var methodSelector = document.getElementById('reload-method');

function updateMethodDescription() {
  var html = document.getElementById(methodSelector.value + '-method').nextSibling.nextSibling.innerHTML
  document.getElementById('reload-method-desc').innerHTML = html;
}

methodSelector.onchange = function() {
  updateMethodDescription();
  saveOptions();
};

function saveOptions() {
  chrome.storage.sync.set({
    reloadMethod: methodSelector.value
  }, function() {
    chrome.runtime.sendMessage({type: "options-saved"});
    var status = document.getElementById('status');
    status.textContent = '(saved)';
    setTimeout(function() {
      status.textContent = '';
    }, 750);
  });
}

function restoreOptions() {
  chrome.storage.sync.get({
    reloadMethod: 'page'
  }, function(items) {
    methodSelector.selectedIndex = items.reloadMethod === 'api' ? 1 : 0;
    updateMethodDescription();
  });
}

document.getElementById('readme-md').innerHTML = require('../../readme.md');
restoreOptions()

},{"../../readme.md":1}]},{},[2])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kbW9saWRvci9fQ29kZS9jaHJvbWUtZXh0ZW5zaW9uLWF1dG8tcmVsb2FkL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9Vc2Vycy9kbW9saWRvci9fQ29kZS9jaHJvbWUtZXh0ZW5zaW9uLWF1dG8tcmVsb2FkL3JlYWRtZS5tZCIsIi9Vc2Vycy9kbW9saWRvci9fQ29kZS9jaHJvbWUtZXh0ZW5zaW9uLWF1dG8tcmVsb2FkL3NyYy9qcy9vcHRpb25zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGgyIGlkPVxcXCJ3aGF0LWlzLXRoaXMtXFxcIj5XaGF0IGlzIHRoaXM/PC9oMj5cXG48cD5UaGlzIGV4dGVuc2lvbiBmb3IgQ2hyb21lIGF1dG9tYXRpY2FsbHkgcmVsb2FkcyB1bnBhY2tlZCBleHRlbnNpb25zIHdoZW5ldmVyIGEgZmlsZSBjaGFuZ2UgZXZlbnQgaXMgZmlyZWQuIFlvdSYjMzk7bGwgbmV2ZXIgbmVlZCB0byBnbyB0byA8Y29kZT5jaHJvbWU6Ly9leHRlbnNpb25zPC9jb2RlPiBhbmQgc21hc2ggcmVsb2FkIGFnYWluLiBTZWUgPGEgaHJlZj1cXFwiI2VtaXR0aW5nLWZpbGUtY2hhbmdlLWV2ZW50c1xcXCI+PHN0cm9uZz5FbWl0dGluZyBGaWxlIENoYW5nZSBFdmVudHM8L3N0cm9uZz48L2E+IGJlbG93IHRvIGxlYXJuIGhvdyB0byB0cmlnZ2VyIHRyaWdnZXIgYSBmaWxlIGNoYW5nZSBldmVudCBpbiB5b3VyIGRldmVsb3BtZW50IGJ1aWxkcy48L3A+XFxuPGgyIGlkPVxcXCJob3ctZG9lcy1pdC13b3JrLVxcXCI+SG93IGRvZXMgaXQgd29yaz88L2gyPlxcbjxwPkV4dGVuc2lvbiB0cmllcyB0byBjb25uZWN0IHRvIHNvY2tldC5pbyBzZXJ2ZXIgb24gPGNvZGU+aHR0cDovL2xvY2FsaG9zdDo4ODkwPC9jb2RlPiAoeWVzLCB0aGF0IHBvcnQgaXMgcmFuZG9tKSBhbmQgd2FpdHMgZm9yIDxjb2RlPmZpbGUuY2hhbmdlPC9jb2RlPiBldmVudHMgdG8gZmxvdyBpbi5cXG5XaGVuIGFuIGV2ZW50IGlzIGluY29taW5nLCB0aGUgZXh0ZW5zaW9uIHJlbG9hZHMgPGNvZGU+Y2hyb21lOi8vZXh0ZW5zaW9uczwvY29kZT4gYXV0b21hdGljYWxseSwgd2hpY2ggY2F1c2VzIGFsbCB1bnBhY2tlZCBleHRlbnNpb25zIHRvIHJlbG9hZCBhbmQgdXBkYXRlIChlLmcuIGNvbnRlbnQgc2NyaXB0cykuXFxuSWYgdGhlcmUgaXMgbm8gb3BlbiB0YWIsIGN1cnJlbnRseSBvcGVuZWQgYXQgPGNvZGU+Y2hyb21lOi8vZXh0ZW5zaW9uczwvY29kZT4sIHRoZSBleHRlbnNpb24gY3JlYXRlcyBhbmQgcmVsb2FkcyBvbmUuPC9wPlxcbjxwPkFuIGV4YW1wbGUgb24gaG93IHRvIHNlbmQgZmlsZSBjaGFuZ2UgZXZlbnRzIHRvIHRoZSBleHRlbnNpb24gY2FuIGJlIGZvdW5kIGluIDxhIGhyZWY9XFxcIiNlbWl0dGluZy1maWxlLWNoYW5nZS1ldmVudHNcXFwiPjxzdHJvbmc+RW1pdHRpbmcgRmlsZSBDaGFuZ2UgRXZlbnRzPC9zdHJvbmc+PC9hPiBiZWxvdy48L3A+XFxuPHA+VGhlcmUgYXJlIHR3byBzdXBwb3J0ZWQgcmVsb2FkIG1ldGhvZHMgKCZxdW90O3BhZ2UmcXVvdDsgYW5kICZxdW90O2FwaSZxdW90OyksIGVhY2ggd2l0aCB0aGVpciBzdHJlbmd0aHMgYW5kIHdlYWtuZXNzZXMuIFRoZSBkZWZhdWx0IGlzICZxdW90O3BhZ2UmcXVvdDssIGJ1dCBpdCBjYW4gYmUgY2hhbmdlZCBpbiB0aGUgb3B0aW9ucyBwYWdlIGZvciB0aGlzIGV4dGVuc2lvbi48L3A+XFxuPGgzIGlkPVxcXCJwYWdlLW1ldGhvZFxcXCI+UGFnZSBNZXRob2Q8L2gzPlxcbjxwPlJlbG9hZHMgPGNvZGU+Y2hyb21lOi8vZXh0ZW5zaW9uczwvY29kZT4gcGFnZSwgd2hpY2ggcmVsb2FkcyBiYWNrZ3JvdW5kIHNjcmlwdHMgd2l0aG91dCBjbG9zaW5nIG9wZW4gYmFja2dyb3VuZCBpbnNwZWN0IHdpbmRvd3MsIGJ1dCBkb2VzIDxzdHJvbmc+bm90PC9zdHJvbmc+IHJlbG9hZCBjb250ZW50IHNjcmlwdHMuPC9wPlxcbjxoMyBpZD1cXFwiYXBpLW1ldGhvZFxcXCI+QVBJIE1ldGhvZDwvaDM+XFxuPHA+VXNlcyBhIENocm9tZSBBUEkgdG8gcmVsb2FkIGV4dGVuc2lvbnMgZGlyZWN0bHksIHdoaWNoIHJlbG9hZHMgYmFja2dyb3VuZCBzY3JpcHRzIGFuZCBjbG9zZXMgYW55IG9wZW4gYmFja2dyb3VuZCBpbnNwZWN0IHdpbmRvd3MsIGJ1dCA8c3Ryb25nPmRvZXM8L3N0cm9uZz4gcmVsb2FkIGNvbnRlbnQgc2NyaXB0cy48L3A+XFxuPGgyIGlkPVxcXCJpbnN0YWxsYXRpb24tdXNhZ2VcXFwiPkluc3RhbGxhdGlvbiAmYW1wOyBVc2FnZTwvaDI+XFxuPHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly9jaHJvbWUuZ29vZ2xlLmNvbS93ZWJzdG9yZS9kZXRhaWwvY2hyb21lLXVucGFja2VkLWV4dGVuc2lvbi9mZGRma21rbGVma2hhbm9maGxvaG5rZW1lamNiYW1sblxcXCI+SW5zdGFsbCB0aGlzIGV4dGVuc2lvbiBmcm9tIHRoZSB3ZWJzdG9yZTwvYT4gb3I6PC9wPlxcbjxvbD5cXG48bGk+Q2xvbmUgPGEgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL3JvYmluLWRyZXhsZXIvY2hyb21lLWV4dGVuc2lvbi1hdXRvLXJlbG9hZFxcXCI+dGhpcyByZXBvPC9hPjwvbGk+XFxuPGxpPlJ1biB0aGUgYnVpbGQgYXMgZGVzY3JpYmVkIGluIDxzdHJvbmc+PGEgaHJlZj1cXFwiI2RldmVsb3BtZW50XFxcIj5EZXZlbG9wbWVudDwvYT48L3N0cm9uZz4gYmVsb3c8L2xpPlxcbjxsaT5Mb2FkIDxjb2RlPmJ1aWxkPC9jb2RlPiBmb2xkZXIgYXMgdW5wYWNrZWQgZXh0ZW5zaW9uIGluIENocm9tZTwvbGk+XFxuPC9vbD5cXG48cD4uLi4gdGhlbiBzdGFydCBkZXZlbG9waW5nIGFuIHVucGFja2VkIGV4dGVuc2lvbiBhbmQgZW1pdCBmaWxlIGNoYW5nZSBldmVudHMgaW4geW91ciBleHRlbnNpb24gYXMgZGVzY3JpYmVkIGJlbG93PC9wPlxcbjxoMiBpZD1cXFwiZW1pdHRpbmctZmlsZS1jaGFuZ2UtZXZlbnRzXFxcIj5FbWl0dGluZyBGaWxlIENoYW5nZSBFdmVudHM8L2gyPlxcbjxwPllvdSB3aWxsIG5lZWQgdG8gaGF2ZSBhIGJhY2tncm91bmQgdGFzayBydW5uaW5nIHRvIGVtaXQgZmlsZSBjaGFuZ2UgZXZlbnRzIHdoZW5ldmVyIGEgZmlsZSBpbiB0aGUgZXh0ZW5zaW9uIHlvdSBhcmUgZGV2ZWxvcGluZyBsb2NhbGx5IGNoYW5nZXMuIFRoaXMgcmVxdWlyZXMgdGhhdCB5b3UgaGF2ZSA8YSBocmVmPVxcXCJodHRwOi8vbm9kZWpzLm9yZ1xcXCI+Tm9kZUpTPC9hPiBpbnN0YWxsZWQgb24geW91ciBtYWNoaW5lLjwvcD5cXG48b2w+XFxuPGxpPjxwPkluc3RhbGwgPGNvZGU+Z3VscDwvY29kZT4gZ2xvYmFsbHkgc28gdGhhdCBpdCYjMzk7cyBlYXN5IHRvIGNhbGwgYnkgcnVubmluZyB0aGUgZm9sbG93aW5nIGZyb20geW91ciBjb21tYW5kIGxpbmUgaW50ZXJmYWNlIGluIHRoZSByb290IG9mIHlvdXIgcHJvamVjdDo8L3A+XFxuPHByZT48Y29kZT48ZGl2IGNsYXNzPVxcXCJoaWdobGlnaHRcXFwiPjxwcmU+PHNwYW4gY2xhc3M9XFxcIm54XFxcIj5ucG08L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJueFxcXCI+aTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcIm54XFxcIj5ndWxwPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwib1xcXCI+LTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwibnhcXFwiPmc8L3NwYW4+XFxuPC9wcmU+PC9kaXY+XFxuXFxuPC9jb2RlPjwvcHJlPjwvbGk+XFxuPGxpPjxwPkluc3RhbGwgcmVxdWlyZWQgZGVwZW5kZW5jaWVzOjwvcD5cXG48cHJlPjxjb2RlPjxkaXYgY2xhc3M9XFxcImhpZ2hsaWdodFxcXCI+PHByZT48c3BhbiBjbGFzcz1cXFwibnhcXFwiPm5wbTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcIm54XFxcIj5pPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPmd1bHA8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInBcXFwiPiw8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJueFxcXCI+Z3VscDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwib1xcXCI+LTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwibnhcXFwiPndhdGNoPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJwXFxcIj4sPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPnNvY2tldDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwicFxcXCI+Ljwvc3Bhbj48c3BhbiBjbGFzcz1cXFwibnhcXFwiPmlvPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwib1xcXCI+LTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwibnhcXFwiPkQ8L3NwYW4+XFxuPC9wcmU+PC9kaXY+XFxuXFxuPC9jb2RlPjwvcHJlPjxwPlRoaXMgd2lsbCBhZGQgdGhlIHRocmVlIHJlcXVpcmVkIG1vZHVsZXMgaW50byB0aGUgPGNvZGU+ZGV2RGVwZW5kZW5jaWVzPC9jb2RlPiBvZiB5b3VyIDxjb2RlPnBhY2thZ2UuanNvbjwvY29kZT4gZmlsZS48L3A+XFxuPC9saT5cXG48bGk+PHA+Q3JlYXRlIGEgZmlsZSBjYWxsZWQgPGNvZGU+Z3VscGZpbGUuanM8L2NvZGU+IGluIHRoZSByb290IG9mIHlvdXIgcHJvamVjdCBjb250YWluaW5nIHRoZSBmb2xsb3dpbmc6PC9wPlxcbjxwcmU+PGNvZGU+PGRpdiBjbGFzcz1cXFwiaGlnaGxpZ2h0XFxcIj48cHJlPjxzcGFuIGNsYXNzPVxcXCJrZFxcXCI+dmFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPmd1bHA8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJvXFxcIj49PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPnJlcXVpcmU8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInBcXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInMxXFxcIj4mIzM5O2d1bHAmIzM5Ozwvc3Bhbj48c3BhbiBjbGFzcz1cXFwicFxcXCI+KTs7PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJrZFxcXCI+dmFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPndhdGNoPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwib1xcXCI+PTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcIm54XFxcIj5yZXF1aXJlPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJwXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJzMVxcXCI+JiMzOTtndWxwLXdhdGNoJiMzOTs8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInBcXFwiPik7PC9zcGFuPlxcbjxzcGFuIGNsYXNzPVxcXCJrZFxcXCI+dmFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPmlvPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwib1xcXCI+PTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcIm54XFxcIj5yZXF1aXJlPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJwXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJzMVxcXCI+JiMzOTtzb2NrZXQuaW8mIzM5Ozwvc3Bhbj48c3BhbiBjbGFzcz1cXFwicFxcXCI+KTs8L3NwYW4+XFxuXFxuPHNwYW4gY2xhc3M9XFxcIm54XFxcIj5ndWxwPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJwXFxcIj4uPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJueFxcXCI+dGFzazwvc3Bhbj48c3BhbiBjbGFzcz1cXFwicFxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwiczFcXFwiPiYjMzk7Y2hyb21lLXdhdGNoJiMzOTs8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInBcXFwiPiw8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJrZFxcXCI+ZnVuY3Rpb248L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJwXFxcIj4oKTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInBcXFwiPns8L3NwYW4+XFxuICA8c3BhbiBjbGFzcz1cXFwia2RcXFwiPnZhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcIm54XFxcIj5XRUJfU09DS0VUX1BPUlQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJvXFxcIj49PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibWlcXFwiPjg4OTA8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInBcXFwiPjs8L3NwYW4+XFxuICA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPmlvPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwib1xcXCI+PTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcIm54XFxcIj5pbzwvc3Bhbj48c3BhbiBjbGFzcz1cXFwicFxcXCI+Ljwvc3Bhbj48c3BhbiBjbGFzcz1cXFwibnhcXFwiPmxpc3Rlbjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwicFxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwibnhcXFwiPldFQl9TT0NLRVRfUE9SVDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwicFxcXCI+KTs8L3NwYW4+XFxuICA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPndhdGNoPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJwXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJzMVxcXCI+JiMzOTsqKi8qLiomIzM5Ozwvc3Bhbj48c3BhbiBjbGFzcz1cXFwicFxcXCI+LDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImtkXFxcIj5mdW5jdGlvbjwvc3Bhbj48c3BhbiBjbGFzcz1cXFwicFxcXCI+KDwvc3Bhbj48c3BhbiBjbGFzcz1cXFwibnhcXFwiPmZpbGU8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInBcXFwiPik8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJwXFxcIj57PC9zcGFuPlxcbiAgICA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPmNvbnNvbGU8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInBcXFwiPi48L3NwYW4+PHNwYW4gY2xhc3M9XFxcIm54XFxcIj5sb2c8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInBcXFwiPig8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInMxXFxcIj4mIzM5O2NoYW5nZSBkZXRlY3RlZCYjMzk7PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJwXFxcIj4sPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPmZpbGU8L3NwYW4+PHNwYW4gY2xhc3M9XFxcInBcXFwiPi48L3NwYW4+PHNwYW4gY2xhc3M9XFxcIm54XFxcIj5yZWxhdGl2ZTwvc3Bhbj48c3BhbiBjbGFzcz1cXFwicFxcXCI+KTs8L3NwYW4+XFxuICAgIDxzcGFuIGNsYXNzPVxcXCJueFxcXCI+aW88L3NwYW4+PHNwYW4gY2xhc3M9XFxcInBcXFwiPi48L3NwYW4+PHNwYW4gY2xhc3M9XFxcIm54XFxcIj5lbWl0PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJwXFxcIj4oPC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJzMVxcXCI+JiMzOTtmaWxlLmNoYW5nZSYjMzk7PC9zcGFuPjxzcGFuIGNsYXNzPVxcXCJwXFxcIj4sPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwicFxcXCI+e30pOzwvc3Bhbj5cXG4gIDxzcGFuIGNsYXNzPVxcXCJwXFxcIj59KTs8L3NwYW4+XFxuPHNwYW4gY2xhc3M9XFxcInBcXFwiPn0pOzwvc3Bhbj5cXG48L3ByZT48L2Rpdj5cXG5cXG48L2NvZGU+PC9wcmU+PC9saT5cXG48bGk+PHA+UnVuIHRoZSBmaWxlIGNoYW5nZSB3YXRjaGVyIGZyb20geW91ciBjb21tYW5kIGxpbmU6PC9wPlxcbjxwcmU+PGNvZGU+PGRpdiBjbGFzcz1cXFwiaGlnaGxpZ2h0XFxcIj48cHJlPjxzcGFuIGNsYXNzPVxcXCJueFxcXCI+Z3VscDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcIm54XFxcIj5jaHJvbWU8L3NwYW4+PHNwYW4gY2xhc3M9XFxcIm9cXFwiPi08L3NwYW4+PHNwYW4gY2xhc3M9XFxcIm54XFxcIj53YXRjaDwvc3Bhbj5cXG48L3ByZT48L2Rpdj5cXG5cXG48L2NvZGU+PC9wcmU+PHA+VGhpcyB3aWxsIGxhdW5jaCBhIHByb2Nlc3MgdGhhdCBlbWl0cyBhIDxjb2RlPmZpbGUuY2hhbmdlPC9jb2RlPiBldmVudCBvdmVyIDxjb2RlPnNvY2tldC5pbzwvY29kZT4gd2hlbmV2ZXIgYSBmaWxlIGluIHlvdXIgcHJvamVjdCBpcyBjaGFuZ2VzLjwvcD5cXG48L2xpPlxcbjwvb2w+XFxuPHA+PHN0cm9uZz5Ob3RlOjwvc3Ryb25nPiBZb3UgY2FuIHVzZSB0aGUgY29kZSBhYm92ZSBhcyBhIGd1aWRlIHdoZW4gbW9kaWZ5aW5nIHlvdXIgZXhpc3Rpbmcgd2F0Y2ggbWV0aG9kIGlmIHlvdSBhbHJlYWR5IGhhdmUgb25lLCBvciBpZiB5b3UmIzM5O3JlIHVzaW5nIGFub3RoZXIgYnVpbGQgdG9vbCBsaWtlIDxjb2RlPmdydW50PC9jb2RlPi48L3A+XFxuPGgyIGlkPVxcXCJpc3N1ZXMtYW5kLWZlYXR1cmUtcmVxdWVzdHNcXFwiPklzc3VlcyBhbmQgRmVhdHVyZSByZXF1ZXN0czwvaDI+XFxuPHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL3JvYmluLWRyZXhsZXIvY2hyb21lLWV4dGVuc2lvbi1hdXRvLXJlbG9hZC9pc3N1ZXNcXFwiPmh0dHBzOi8vZ2l0aHViLmNvbS9yb2Jpbi1kcmV4bGVyL2Nocm9tZS1leHRlbnNpb24tYXV0by1yZWxvYWQvaXNzdWVzPC9hPjwvcD5cXG48aDIgaWQ9XFxcImRldmVsb3BtZW50XFxcIj5EZXZlbG9wbWVudDwvaDI+XFxuPHA+VG8gaGFjayB0aGlzIGNvZGUsIG1ha2Ugc3VyZSB5b3UgaGF2ZSA8YSBocmVmPVxcXCJodHRwOi8vbm9kZWpzLm9yZ1xcXCI+Tm9kZUpTPC9hPiBpbnN0YWxsZWQsIHRoZW4gbmF2aWdhdGUgdG8gdGhlIHJvb3Qgb2YgdGhpcyBwcm9qZWN0IGluIHlvdXIgY29tbWFuZCBsaW5lIGludGVyZmFjZSBhbmQgcnVuIHRoZSBmb2xsb3dpbmcgdG8gaW5zdGFsbCBhbGwgZGVwZW5kZW5jaWVzOjwvcD5cXG48cHJlPjxjb2RlPjxkaXYgY2xhc3M9XFxcImhpZ2hsaWdodFxcXCI+PHByZT48c3BhbiBjbGFzcz1cXFwibnhcXFwiPm5wbTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcIm54XFxcIj5pbnN0YWxsPC9zcGFuPlxcbjwvcHJlPjwvZGl2PlxcblxcbjwvY29kZT48L3ByZT48cD5HZW5lcmF0ZSBhIDxjb2RlPmJ1aWxkLzwvY29kZT4gZm9sZGVyIHdoaWNoIGNhbiBiZSBsb2FkZWQgaW50byBDaHJvbWUgYXMgYW4gdW5wYWNrZWQgZXh0ZW5zaW9uOjwvcD5cXG48cHJlPjxjb2RlPjxkaXYgY2xhc3M9XFxcImhpZ2hsaWdodFxcXCI+PHByZT48c3BhbiBjbGFzcz1cXFwibnhcXFwiPm5wbTwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcIm54XFxcIj5ydW48L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJueFxcXCI+YnVpbGQ8L3NwYW4+XFxuPC9wcmU+PC9kaXY+XFxuXFxuPC9jb2RlPjwvcHJlPjxwPkF1dG9tYXRpY2FsbHkgcmVidWlsZCBtb2RpZmllZCBmaWxlcyBpbnRvIDxjb2RlPmJ1aWxkLzwvY29kZT4gd2hlbiB0aGV5JiMzOTtyZSBzYXZlZDo8L3A+XFxuPHByZT48Y29kZT48ZGl2IGNsYXNzPVxcXCJoaWdobGlnaHRcXFwiPjxwcmU+PHNwYW4gY2xhc3M9XFxcIm54XFxcIj5ucG08L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJueFxcXCI+cnVuPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPndhdGNoPC9zcGFuPlxcbjwvcHJlPjwvZGl2PlxcblxcbjwvY29kZT48L3ByZT48cD5HZW5lcmF0ZSA8Y29kZT5kaXN0L2Nocm9tZS1leHRlbnNpb24uemlwPC9jb2RlPiwgd2hpY2ggY2FuIGJlIHVwbG9hZGVkIHRvIHRoZSBDaHJvbSB3ZWIgc3RvcmU6PC9wPlxcbjxwcmU+PGNvZGU+PGRpdiBjbGFzcz1cXFwiaGlnaGxpZ2h0XFxcIj48cHJlPjxzcGFuIGNsYXNzPVxcXCJueFxcXCI+bnBtPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibnhcXFwiPnJ1bjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcIm54XFxcIj5kaXN0PC9zcGFuPlxcbjwvcHJlPjwvZGl2PlxcblxcbjwvY29kZT48L3ByZT48aDIgaWQ9XFxcImNvbnRyaWJ1dG9yc1xcXCI+Q29udHJpYnV0b3JzPC9oMj5cXG48cD5UaGlzIGV4dGVuc2lvbiB3YXMgb3JpZ2luYWxseSBkZXZlbG9wZWQgYnkgPGEgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL3JvYmluLWRyZXhsZXIvY2hyb21lLWV4dGVuc2lvbi1hdXRvLXJlbG9hZFxcXCI+cm9iaW4tZHJleGxlcjwvYT4uPC9wPlxcbjxwPlVwZGF0ZXMgYnkgPGEgaHJlZj1cXFwiaHR0cHM6Ly9naXRodWIuY29tL0plcm9tZURhbmUvY2hyb21lLWV4dGVuc2lvbi1hdXRvLXJlbG9hZFxcXCI+SmVyb21lRGFuZTwvYT4gdG8gYWRkIGFsdGVybmF0ZSByZWxvYWQgbWV0aG9kIHVzaW5nIDxhIGhyZWY9XFxcImh0dHBzOi8vZ2l0aHViLmNvbS9hcmlrdy9jaHJvbWUtZXh0ZW5zaW9ucy1yZWxvYWRlci9ibG9iL21hc3Rlci9iYWNrZ3JvdW5kLmpzI0wxXFxcIj5hcmlrdyYjMzk7cyBjb2RlPC9hPi4gQWRkZWQgZ3VscCBidWlsZCBwcm9jZXNzIGFuZCByZW1vdmVkIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL3NvY2tldC5pby1jbGllbnRcXFwiPnNvY2tldC5pby1jbGllbnQ8L2E+IGNvZGUgZnJvbSByZXBvIHNvIGl0IGNvdWxkIGJlIGxvYWRlZCBhcyBhIGRlcGVuZGVuY3kgaW5zdGVhZC48L3A+XFxuXCI7IiwiXG52YXIgbWV0aG9kU2VsZWN0b3IgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncmVsb2FkLW1ldGhvZCcpO1xuXG5mdW5jdGlvbiB1cGRhdGVNZXRob2REZXNjcmlwdGlvbigpIHtcbiAgdmFyIGh0bWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtZXRob2RTZWxlY3Rvci52YWx1ZSArICctbWV0aG9kJykubmV4dFNpYmxpbmcubmV4dFNpYmxpbmcuaW5uZXJIVE1MXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWxvYWQtbWV0aG9kLWRlc2MnKS5pbm5lckhUTUwgPSBodG1sO1xufVxuXG5tZXRob2RTZWxlY3Rvci5vbmNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICB1cGRhdGVNZXRob2REZXNjcmlwdGlvbigpO1xuICBzYXZlT3B0aW9ucygpO1xufTtcblxuZnVuY3Rpb24gc2F2ZU9wdGlvbnMoKSB7XG4gIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHtcbiAgICByZWxvYWRNZXRob2Q6IG1ldGhvZFNlbGVjdG9yLnZhbHVlXG4gIH0sIGZ1bmN0aW9uKCkge1xuICAgIGNocm9tZS5ydW50aW1lLnNlbmRNZXNzYWdlKHt0eXBlOiBcIm9wdGlvbnMtc2F2ZWRcIn0pO1xuICAgIHZhciBzdGF0dXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc3RhdHVzJyk7XG4gICAgc3RhdHVzLnRleHRDb250ZW50ID0gJyhzYXZlZCknO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBzdGF0dXMudGV4dENvbnRlbnQgPSAnJztcbiAgICB9LCA3NTApO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcmVzdG9yZU9wdGlvbnMoKSB7XG4gIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KHtcbiAgICByZWxvYWRNZXRob2Q6ICdwYWdlJ1xuICB9LCBmdW5jdGlvbihpdGVtcykge1xuICAgIG1ldGhvZFNlbGVjdG9yLnNlbGVjdGVkSW5kZXggPSBpdGVtcy5yZWxvYWRNZXRob2QgPT09ICdhcGknID8gMSA6IDA7XG4gICAgdXBkYXRlTWV0aG9kRGVzY3JpcHRpb24oKTtcbiAgfSk7XG59XG5cbmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZWFkbWUtbWQnKS5pbm5lckhUTUwgPSByZXF1aXJlKCcuLi8uLi9yZWFkbWUubWQnKTtcbnJlc3RvcmVPcHRpb25zKClcbiJdfQ==
